<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, June 08, 2011, 10:50 PM -->
<!-- MuClient version 4.31 -->

<!-- Plugin "smoothTick" generated by Plugin Wizard -->

<muclient>
<plugin
   name="smoothTick"
   author="Spartacus"
   id="f64e84495f161a3c1b2f640c"
   language="Lua"
   purpose="a better tick timer"
   save_state="y"
   date_written="2011-06-08 10:48:38"
   requires="4.73"
   version="1.0"
   >
</plugin>

<!--  Timers  -->

<timers>
  <timer
   enabled="y"
   at_time="n"
   second="0.100"
   send_to="12"
   >
  <send>
    last_tick = last_tick or os.clock ()
    s = (os.clock() - last_tick)
    --Note(30-s, ' seconds to tick')
    WindowRectOp (win, miniwin.rect_fill, 0, 0, 0, 0, bgColor)
    drawMenuHandle()
    drawFace()
    drawHand(s)
    winTitle()
    local digits = string.format('%02d',31-s)
    WindowText(win, 'fDigit', digits, (WindowInfo(win, 3) / 2 - WindowTextWidth(win, 'fDigit', digits, false) / 2) + 1, 0.65 * WindowInfo(win, 4), 0, 0, textColor, false)
    WindowShow(win, true)
  </send>
  </timer>
</timers>

<script>
<![CDATA[

require "serialize"

function trim(s)
  return (s:gsub("^%s*(.-)%s*$", "%1"))
end

function OnPluginTelnetOption (option)
   if option == string.char (101,1) then
      -- last_tick = os.time()
      last_tick = os.clock()
      -- SetStatus ("Time to tick: " .. (last_tick + 30) - os.time ())
   end -- if
end -- function

function OnPluginInstall ()
  setDefaults()
  loadState()
  -- if disabled last time, stay disabled
  if GetVariable ("enabled") == "false" then
    ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
    check (EnablePlugin(GetPluginID (), false))
    return
  else
    showTicker()
  end -- they didn't enable us last time  
end -- OnPluginInstall

-- pull in telnet option handling
dofile (GetPluginInfo (GetPluginID (), 20) .. "telnet_options.lua")

function OnPluginDisable ()
  setDefaults()
  OnPluginSaveState()
  WindowDelete(win)
end -- OnPluginSaveState
  
function OnPluginEnable ()
  setDefaults()
  loadState()
  showTicker()
end -- OnPluginEnable

function OnPluginSaveState ()
  if win == nil then setDefaults() end
  if WindowInfo(win, 7) ~= nil then
    SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
    SetVariable ("lay", WindowInfo(win, 7))
    SetVariable ("flags", WindowInfo(win, 8))
    SetVariable ("posx", WindowInfo(win, 10))
    SetVariable ("posy", WindowInfo(win, 11))
    SetVariable ("zord", WindowInfo(win, 22))
  end
  if bgColor ~= nil then
    SetVariable ("bgColor", bgColor)
    SetVariable ("pinColor", pinColor)
    SetVariable ("faceColor", faceColor)
    SetVariable ("handColor", handColor)
    SetVariable ("markColor", markColor)
    SetVariable ("menuColor", menuColor)
    SetVariable ("textColor", textColor)
    SetVariable ("titleColor", titleColor)
  end
  if titleFont ~= nil then
    SetVariable ("titleFont", serialize.save("titleFont", titleFont))
  end
    if digitFont ~= nil then
    SetVariable ("digitFont", serialize.save("digitFont", digitFont))
  end
  if facetFont ~= nil then
    SetVariable ("facetFont", serialize.save("facetFont", facetFont))
  end
end -- OnPluginSaveState

function loadState ()
  lay = tonumber(GetVariable ("lay")) or 0
  flags = tonumber(GetVariable ("flags")) or 0
  bgColor = tonumber(GetVariable ("bgColor")) or ColourNameToRGB("black")
  pinColor = tonumber(GetVariable ("pinColor")) or ColourNameToRGB("deepskyblue")
  faceColor = tonumber(GetVariable ("faceColor")) or bgColor
  handColor = tonumber(GetVariable ("handColor")) or ColourNameToRGB("red")
  markColor = tonumber(GetVariable ("markColor")) or ColourNameToRGB("deepskyblue")
  menuColor = tonumber(GetVariable ("menuColor")) or ColourNameToRGB("gray")
  textColor = tonumber(GetVariable ("textColor")) or ColourNameToRGB("lime")
  titleColor = tonumber(GetVariable ("titleColor")) or ColourNameToRGB("white")
  posx = tonumber(GetVariable ("posx")) or 100
  posy = tonumber(GetVariable ("posy")) or 100
  zord = tonumber(GetVariable ("zord")) or 1200
  
  
  local t = GetVariable("titleFont")
  local d = GetVariable("digitFont")
  local f = GetVariable("facetFont")
  -- this should set our font variables
  r = t ~= nil and loadstring(t)()
  r = d ~= nil and loadstring(d)()
  r = f ~= nil and loadstring(f)()
  
  --Note("Placing window '", win, "' at (", posx, ", ", posy, ")")
  --WindowPosition(win, posx, posy, 0, setbit(flags, 2))
  WindowSetZOrder(win, zord)
end --loadState

function setDefaults()
  cx = 60 -- center X
  cy = 50 -- center Y

  win = 'ticker'
end -- setDefaults

function loadFont(id, f, ds)
  --Trebuchet MS
  local nm, sz, bl, it, ul, so
  if f ~= nil then
    nm, sz, bl, it, ul, so = f.name, f.size, f.bold, f.italic, f.underline, f.strikeout
  else
    nm, sz, bl, it, ul, so = '-NoFont', ds, false, false, false, false
  end
  WindowFont (win, id, nm, sz, bl, it, ul, so) -- define font
end -- loadFont

function showTicker()
  posx = tonumber(GetVariable('posx')) or 250
  posy = tonumber(GetVariable('posy')) or 250
  flags = tonumber(GetVariable('flags')) or 6
  -- Note('Creating window at (', posx, ',', posy, ')')
  x = WindowCreate(win, posx, posy, 121, 121, 12, setbit(flags, 2), bgColor)
  WindowSetZOrder(win, 1200)
  WindowShow(win, true)
  
  --Trebuchet MS
  loadFont('fTitle', titleFont, 8)
  loadFont('fDigit', digitFont, 14)
  loadFont('fFacet', facetFont, 8)
  
  winTitle()
  drawFace()
  
  -- set up the drag handler
  
  WindowAddHotspot(win, "hs1",  
                   0, 0, 120, 120,   -- rectangle
                   "",   -- MouseOver
                   "",   -- CancelMouseOver
                   "mousedown",
                   "cancelmousedown", 
                   "mouseup", 
                   "Click to drag this window.",  -- tooltip text
                   1, 0)  -- hand cursor

  WindowAddHotspot(win, "0hs",  
                   0, 0, 20, 20,   -- rectangle
                   "",   -- MouseOver
                   "",   -- CancelMouseOver
                   "",
                   "", 
                   "showConfigMenu", 
                   "Click to configure timer",  -- tooltip text
                   1, 0)  -- hand cursor
  
  WindowDragHandler (win, "hs1", "dragmove", "dragrelease", 0)
end --showTicker

function showConfigMenu()
  OnPluginSaveState()
  local tCheck
  if bgColor == WindowInfo(win, 9) and hasbit(WindowInfo(win, 8), 4) then
    tCheck = '+'
  else
    tCheck = ''
  end
  local mStr = '!>Font | Title | Face | Digital | < | ' .. tCheck .. 'Transparent | >Colors | Background | Center pin | ^Face | Hand | Marks | Menu handle | Digital | Title | < | - | ^Bring to Front | ^Send to Back'
  local res = tonumber(WindowMenu(win, 5, 5, mStr)) or -1

  if res == 1 then
    local n, s, c = fontDetails(titleFont)
    titleFont = utils.fontpicker(n, s, c)
    loadFont('fTitle', titleFont, 8)
  elseif res == 2 then
    local n, s, c = fontDetails(facetFont)
    facetFont = utils.fontpicker(n, s, c)
    loadFont('fFacet', facetFont, 8)
  elseif res == 3 then
    local n, s, c = fontDetails(digitFont)
    digitFont = utils.fontpicker(n, s, c)
    loadFont('fDigit', digitFont, 14)
  elseif res == 4 then
    local flags = WindowInfo(win, 8)
    if tCheck == '+' then
      loadState()
      flags = clearbit(flags, 4)
      WindowPosition(win, posx, posy, 0, setbit(flags, 2))
    else
      flags = setbit(flags, 4)
      bgColor = WindowInfo(win, 9)
      WindowPosition(win, posx, posy, 0, setbit(flags, 2))
    end
  elseif res == 5 then
    bgColor = getColor(bgColor)
  elseif res == 6 then
    pinColor = getColor(pinColor)
  elseif res == 'face' then  -- not currently selectable
    faceColor = getColor(faceColor)
  elseif res == 7 then
    handColor = getColor(handColor)
  elseif res == 8 then
    markColor = getColor(markColor)
  elseif res == 9 then
    menuColor = getColor(menuColor)
  elseif res == 10 then
    textColor = getColor(textColor)
  elseif res == 11 then
    titleColor = getColor(titleColor)
  else -- unhandled menu option
    Note('Not yet implemented.')
  end
  OnPluginSaveState()
end --showConfigMenu

function fontDetails(f)
  if f ~= nil then
    return f.name, f.size, f.color
  else
    return '-NoFont-', 8, 0
  end
end --fontDetails

function getFont(f)
  local n = utils.fontpicker(f.name, f.colour, f.size)
  if n == nil then
    return f
  else
    return n
  end
end --getFont

function getColor(c)
  local newColor = PickColour (c)
  if newcolor ~= -1 then
    c = newColor
  end
  return c
end --getColor

function round(v)
    local r = 0
    if type(v) == 'number' then
        i, f = math.modf(v)
        if f > 0.5 then
            r = i + 1
        else
            r = i
        end
    end
    return r
end --round

function drawFace()
    local r = 52
    local dpd = 12 -- degrees per mark on the clock face
    
    d = 0
    fmt = '(sin, cos)=(%1.3f, %1.3f)  (x, y)=(%d, %d)'
    while d <= 360 do
        local s = math.sin(2 * math.pi * (360 - d) / 360)
        local c = math.cos(2 * math.pi * (360 - d) / 360)
        x1 = round(cx + r * s) - 2
        y1 = round(cy + r * c) - 5
        -- x2 = round(cx + (r + 5) * s)
        -- y2 = round(cy + (r + 5) * c)
        -- WindowLine(win, x1, y1, x2, y2, ColourNameToRGB("black"), 0, 2)
        res = WindowText(win, 'fFacet', '.', x1, y1, 0, 0, markColor, false)
        d = d + dpd
    end
    res = WindowCircleOp(win, 1, cx - 4, cy + 6, cx + 5, cy + 15, pinColor, 0, 1, 0, 0, 0, 0)
end --drawFace

function drawHand(t)
    local spt = 30  -- seconds per tick - divisions in the circle
    local r = 50 -- radius of the hand
    
    a = 2 * math.pi * (spt - t) / spt  -- angle of the line
    local s = math.sin(a)
    local c = math.cos(a)
    
    -- for a needle that extends past center
    -- x1 = 1+round(cx + 0.1 * r * s)
    -- y1 = 10 + round(cy + 0.1 * r * c)
    
    -- for a needle that goes to center
    -- x1 = cx
    -- y1 = 10+cy
    
    -- for a needle that does not reach center
    x1 = 1+round(cx - 0.3 * r * s)
    y1 = 10 + round(cy - 0.3 * r * c)
    
    x2 = 1+round(cx - 0.9 * r * s)
    y2 = 10 + round(cy - 0.9 * r * c)
    
    WindowLine(win, x1, y1, x2, y2, handColor, 0, 2)
end --drawHand

function winTitle()
  local title = 'Tick Timer'
  res = WindowText(win, 'fTitle', title, (WindowInfo(win, 3) / 2 - WindowTextWidth(win, 'fTitle', title, false) / 2) + 1, 0.25 * WindowInfo(win, 4), 0, 0, titleColor, false)
end

function drawMenuHandle()
  WindowPolygon(win, "4,4,18,4,11,14" , menuColor, 6, 1, menuColor, 8 , true, false)
end

function testHand()
    local t=0
    while t<30 do
        drawHand(t)
        t = t + 1
    end
end

function mousedown(flags, hotspot_id)
  startx, starty = WindowInfo (win, 14), WindowInfo (win, 15)
  WindowSetZOrder(win, 1200)
  -- print ("we moused down on hotspot " .. hotspot_id)
end -- mousedown

function cancelmousedown(flags, hotspot_id)
  -- print ("we cancelled moused down for hotspot " .. hotspot_id)
end -- cancelmousedown

function mouseup(flags, hotspot_id)
  -- print ("we moused up on hotspot " .. hotspot_id)
end -- mouseup

function dragmove(flags, hotspot_id)
  local posx, posy, flags = WindowInfo (win, 17),
                     WindowInfo (win, 18),
                     WindowInfo(win, 8)

  -- print ("moved to position", posx, posy)
  -- move the window to the new location
  WindowPosition(win, posx - startx, posy - starty, 0, setbit(flags, 2));
  
  -- change the mouse cursor shape appropriately
  if posx < 0 or posx > GetInfo (281) or
     posy < 0 or posy > GetInfo (280) then
    check (SetCursor ( 11))   -- X cursor
  else
    check (SetCursor ( 1))   -- hand cursor
  end -- if
  
end -- dragmove

function dragrelease(flags, hotspot_id)
  -- print ("mouse drag release for " .. hotspot_id)
  -- print ("released at position", WindowInfo (win, 17), WindowInfo (win, 18))
  -- print ("moved to position", posx, posy)
  OnPluginSaveState()
end -- dragrelease


function bit(p)
  return 2 ^ (p - 1)  -- 1-based indexing
end

-- Typical call:  if hasbit(x, bit(3)) then ...
function hasbit(x, p)
  return x % (p + p) >= p       
end

function setbit(x, p)
  return hasbit(x, p) and x or x + p
end

function clearbit(x, p)
  return hasbit(x, p) and x - p or x
end

]]>
</script>
</muclient>
